[versions]
app = "1.0.0"
group = "com.elakov"
# JUNIT
junit-jupiter = "5.10.0"
# ALLURE
allure = "2.23.0"
# SELENIDE
selenide = "6.17.1"
# SPRING
jakarta-annotaion = "1.3.5"
jakarta-validation = "2.0.2"
#spring-feign = "12.4"
retrofit = '2.9.0'
spring-kafka = "3.0.9"
spring-crypto = "6.1.2"
spring-security-oauth2 = "1.0.0"
spring-grpc = "2.14.0.RELEASE"
## DATABASE
p6spy = "3.9.1"
my-sql = "8.0.33"
sql-formatter = "2.0.3"
hibernate = "6.2.6.Final"
# GRPC
grpc = "1.57.2"
grpc-protobuf = "1.57.2"
protobuf = "3.23.4"
# LOGS
slfj = "2.0.7"
logback = "1.4.5"
logging-interceptor = "3.14.9"
# OTHER
assertj = "3.24.2"
faker = "1.0.2"
commons-io = "2.13.0"
owner = "1.0.12"
google-findbugs = "3.0.2"
spring-data-commons = "2.6.2"
aspectj = "1.9.19"
database-rider = "1.39.0"
#################################################################################### PLUGINS ####################################################################################
lombok = "8.1.0"
allure-plugin = "2.11.2"
springframework-boot = "3.0.1"
spring-dependency-management = "1.1.0"
docker-palantir = "0.35.0"
protobuf-plugin = "0.9.4"
###############################################################################################################################################################################
[libraries]
#################################################################################### SPRING ####################################################################################
spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-webflux-starter = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-actuator-starter = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-security-starter = { module = 'org.springframework.boot:spring-boot-starter-security' }
spring-data-jpa-starter = { module = 'org.springframework.boot:spring-boot-starter-data-jpa' }
spring-thymeleaf-starter = { module = "org.springframework.boot:spring-boot-starter-thymeleaf" }
spring-kafka = { module = 'org.springframework.kafka:spring-kafka', version.ref = "spring-kafka" }
spring-validation-starter = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-services-starter = { module = "org.springframework.boot:spring-boot-starter-web-services" }
spring-oauth2-starter = { module = "org.springframework.boot:spring-boot-starter-oauth2-resource-server" }
spring-grpc-server-starter = { module = "net.devh:grpc-server-spring-boot-starter", version.ref = "spring-grpc" }
spring-grpc-client-starter = { module = "net.devh:grpc-client-spring-boot-starter", version.ref = "spring-grpc" }
spring-data-commons = { module = "org.springframework.data:spring-data-commons", version.ref = "spring-data-commons" }
spring-security-crypto = { module = "org.springframework.security:spring-security-crypto", version.ref = "spring-crypto" }
spring-security-oauth2 = { module = "org.springframework.security:spring-security-oauth2-authorization-server", version.ref = "spring-security-oauth2" }
#feign-micrometer = { module = "io.github.openfeign:feign-micrometer", version.ref = "spring-feign" }
#feign-jackson = { module = "io.github.openfeign:feign-jackson", version.ref = "spring-feign" }
#feign-okhttp = { module = "io.github.openfeign:feign-okhttp", version.ref = "spring-feign" }
#feign-slf4j = { module = "io.github.openfeign:feign-slf4j", version.ref = "spring-feign" }
#feign-gson = { module = "io.github.openfeign:feign-gson", version.ref = "spring-feign" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit-converter = { module = "com.squareup.retrofit2:converter-jackson", version.ref = "retrofit" }
reactor-netty = { module = "io.projectreactor.netty:reactor-netty" }

grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
grpc-netty = { module = "io.grpc:grpc-netty", version.ref = "grpc" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc-protobuf" }
protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
#################################################################################### TESTING ####################################################################################
junit5-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit-jupiter" }
allure-junit5 = { module = "io.qameta.allure:allure-junit5", version.ref = "allure" }
allure-assertj = { module = "io.qameta.allure:allure-assertj", version.ref = "allure" }
allure-selenide = { module = "io.qameta.allure:allure-selenide", version.ref = "allure" }
allure-okkhttp3 = { module = "io.qameta.allure:allure-okhttp3", version.ref = "allure" }
allure-grpc = { module = "io.qameta.allure:allure-grpc", version.ref = "allure" }
allure-attachments = { module = "io.qameta.allure:allure-attachments", version.ref = "allure" }
#allure-commandline = { module = "io.qameta.allure:allure-commandline", version.ref = "allure" }
selenide = { module = "com.codeborne:selenide", version.ref = "selenide" }
selenide-core = { module = "com.codeborne:selenide-core", version.ref = "selenide" }
#################################################################################### DATABASE ####################################################################################
mysql = { module = "mysql:mysql-connector-java", version.ref = "my-sql" }
p6spy = { module = "p6spy:p6spy", version.ref = "p6spy" }
hibernate = { module = "org.hibernate:hibernate-core", version.ref = "hibernate" }
sql-formatter = { module = "com.github.vertical-blank:sql-formatter", version.ref = "sql-formatter" }
#################################################################################### OTHER #######################################################################################
# UTILS
commons-io = { module = "commons-io:commons-io", version.ref = "commons-io" }
aeonbits-owner = { module = "org.aeonbits.owner:owner", version.ref = "owner" }
assertj-core = { module = "org.assertj:assertj-core", version.ref = "assertj" }
java-faker = { module = "com.github.javafaker:javafaker", version.ref = "faker" }
findbugs = { module = "com.google.code.findbugs:jsr305", version.ref = "google-findbugs" }
database-rider-core = { module = "com.github.database-rider:rider-core", version.ref = "database-rider" }
database-rider-juni5 = { module = "com.github.database-rider:rider-junit5", version.ref = "database-rider" }
jakarta-annotation = { module = "jakarta.annotation:jakarta.annotation-api", version.ref = "jakarta-annotaion" }
jakarta-validation = { module = "jakarta.validation:jakarta.validation-api", version.ref = "jakarta-validation" }
# LOGS
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slfj" }
slf4j-jul = { module = "org.slf4j:jul-to-slf4j", version.ref = "slfj" }
logback-core = { module = "ch.qos.logback:logback-core", version.ref = "logback" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
okhttp3-logging-interceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "logging-interceptor" }
# PROJECTS
#grpc-common = { module = "com.elakov.rangiffler:rangiffler-grpc-common" }
###################################################################################################################################################################################
[bundles]
grpc = ["grpc-stub", "grpc-netty", "grpc-protobuf", "protobuf-java"]
grpc-client-server = ["spring-grpc-client-starter", "spring-grpc-server-starter"]
selenide = ["selenide", "selenide-core"]
database = ["mysql", "hibernate", "p6spy", "sql-formatter", "spring-security-crypto"]
logs = ["logback-classic", "logback-core", "slf4j-api", "slf4j-jul"]
spring-boot-starter-auth = ["spring-boot-starter", "spring-thymeleaf-starter", "spring-actuator-starter", "spring-validation-starter", "spring-security-starter", "spring-security-oauth2"]
spring-boot-starter-gateway = ["spring-boot-starter", "spring-webflux-starter", "spring-actuator-starter", "spring-validation-starter", "spring-security-starter", "spring-oauth2-starter", "spring-security-oauth2", "spring-security-starter"]
#feign = ["feign-micrometer", "feign-jackson", "feign-okhttp", "feign-slf4j", "feign-gson"]
retrofit = ["retrofit", "retrofit-converter", "okhttp3-logging-interceptor"]
allure = ["allure-junit5", "allure-assertj", "allure-selenide", "allure-okkhttp3", "allure-grpc", "allure-attachments"]
test-utils = ["assertj-core", "aeonbits-owner", "commons-io", "findbugs", "java-faker", "database-rider-core", "database-rider-juni5"]
###################################################################################################################################################################################
[plugins]
spring-boot = { id = "org.springframework.boot", version.ref = "springframework-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dependency-management" }
lombok = { id = "io.freefair.lombok", version.ref = "lombok" }
allure = { id = "io.qameta.allure", version.ref = "allure-plugin" }
allure-report = { id = "io.qameta.allure-report", version.ref = "allure-plugin" }
allure-adpater = { id = "io.qameta.allure-adapter", version.ref = "allure-plugin" }
docker = { id = "com.palantir.docker", version.ref = "docker-palantir" }
google-protobuf = { id = 'com.google.protobuf', version.ref = "protobuf-plugin" }